apply plugin: 'java'
apply plugin: 'jacoco'

////////////////// sourceSet part //////////////////
/*
 * sourceSet list:
 *    main(default in Gradle) -> main JVM implementation
 *    annotations -> JPF annotations
 *    classes -> model classes
 *    peers -> peer methods
 *    examples -> JPF examples
 */
sourceSets {
    annotations
    main {
        compileClasspath += sourceSets.annotations.output
    }
	classes {
		compileClasspath += sourceSets.main.output + sourceSets.annotations.output
	}
	peers {
		compileClasspath += sourceSets.main.output + sourceSets.annotations.output
	}
	examples {
		compileClasspath += sourceSets.main.output + sourceSets.annotations.output
	}
    nhandler {
        compileClasspath += sourceSets.main.output + sourceSets.annotations.output
    }
    test {
        compileClasspath += sourceSets.annotations.output
        runtimeClasspath += sourceSets.annotations.output
        compileClasspath += sourceSets.nhandler.output
        runtimeClasspath += sourceSets.nhandler.output
        compileClasspath += sourceSets.classes.output
        runtimeClasspath += sourceSets.classes.output
        compileClasspath += sourceSets.peers.output
        runtimeClasspath += sourceSets.peers.output
    }
}

def libFolder = fileTree(dir: "$projectDir/lib", include: '*.jar')
dependencies {
    compile libFolder
    classesCompile libFolder
    peersCompile libFolder
    examplesCompile libFolder
    nhandlerCompile libFolder
    testCompile libFolder
}

////////////////// Build part //////////////////

task classesJar(type: Jar) {
    archiveName = 'jpf-classes.jar'
    from sourceSets.annotations.output
    from sourceSets.classes.output
    from (sourceSets.main.output) {
        include('gov/nasa/jpf/vm/Verify.class')
        include('gov/nasa/jpf/JPFShell.class')
        include('gov/nasa/jpf/util/TypeRef.class')
        include('gov/nasa/jpf/util/test/TestJPF.class')
        include('gov/nasa/jpf/util/test/TestMultiProcessJPF.class')
        include('gov/nasa/jpf/util/test/TestJPFHelper.class')
    }
}

task annotationsJar(type: Jar) {
    archiveName = 'jpf-annotations.jar'
    from sourceSets.annotations.output
}

task classloaderSpecificTestsJar(type: Jar) {
    archiveName = 'classloader_specific_tests.jar'
    from(sourceSets.test.output) {
        include('classloader_specific_tests/*.class')
    }
}

task runJPFJar(type: Jar) {
    archiveName = 'RunJPF.jar'
    from(sourceSets.main.output) {
        include('gov/nasa/jpf/tool/Run.class')
        include('gov/nasa/jpf/tool/RunJPF.class')
        include('gov/nasa/jpf/Config.class')
        include('gov/nasa/jpf/ConfigChangeListener.class')
        include('gov/nasa/jpf/Config$MissingRequiredKeyException.class')
        include('gov/nasa/jpf/JPFClassLoader.class')
        include('gov/nasa/jpf/JPFShell.class')
        include('gov/nasa/jpf/JPFException.class')
        include('gov/nasa/jpf/JPFConfigException.class')
        include('gov/nasa/jpf/JPFTargetException.class')
        include('gov/nasa/jpf/util/JPFSiteUtils.class')
        include('gov/nasa/jpf/util/FileUtils.class')
        include('gov/nasa/jpf/util/StringMatcher.class')
        include('gov/nasa/jpf/util/Pair.class')
    }
    manifest {
        attributes("Main-Class": "gov.nasa.jpf.tool.RunJPF")
    }
}

task runTestJar(type: Jar) {
    archiveName = 'RunTest.jar'
    from(sourceSets.main.output) {
        include('gov/nasa/jpf/tool/Run.class')
        include('gov/nasa/jpf/tool/RunTest.class')
        include('gov/nasa/jpf/tool/RunTest$Failed.class')
        include('gov/nasa/jpf/Config.class')
        include('gov/nasa/jpf/ConfigChangeListener.class')
        include('gov/nasa/jpf/Config$MissingRequiredKeyException.class')
        include('gov/nasa/jpf/JPFClassLoader.class')
        include('gov/nasa/jpf/JPFException.class')
        include('gov/nasa/jpf/JPFConfigException.class')
        include('gov/nasa/jpf/util/JPFSiteUtils.class')
        include('gov/nasa/jpf/util/FileUtils.class')
        include('gov/nasa/jpf/util/StringMatcher.class')
        include('gov/nasa/jpf/util/DevNullPrintStream.class')
    }
    manifest {
        attributes("Main-Class": "gov.nasa.jpf.tool.RunTest")
    }
}

jar {
    archiveName = 'jpf.jar'
    dependsOn classesJar, annotationsJar, runJPFJar, runTestJar, classloaderSpecificTestsJar
    from sourceSets.main.output
    from sourceSets.nhandler.output
    from sourceSets.peers.output
    from sourceSets.annotations.output
    from sourceSets.examples.output
    from sourceSets.test.output
    from(sourceSets.classes.output) {
        include('org/junit/*.class')
    }
}

////////////////// Testing part //////////////////

/*
    Core regression test for JPF
 */
test {
    scanForTestClasses = false
    maxParallelForks = 1
    minHeapSize = "512m"
    maxHeapSize = "1024m"
    include '**/cmu/*Test.class'
    //include '**/jikesRVM/**/Test*.class'
    exclude '**/jikesRVM/**/Test*$*.class'
    exclude '**/FeatureModelTest.class'
    exclude '**/JPF_*.class'
}



////////////////// Static analyses //////////////////
//apply plugin: "findbugs"
//dependencies {
//    findbugs 'org.codehaus.mojo:findbugs-maven-plugin:3.0.1'
//}
//repositories {
//    mavenCentral()
//    maven {
//        url 'file:'+System.getenv('HOME')+'/.m2/repository'
//    }
//}
//
//findbugs {
//    toolVersion = "3.0.1"
//    sourceSets = [sourceSets.main]
//    ignoreFailures = true
//    reportsDir = file("$project.buildDir/reports/findbugs")
//    effort = "max"
//    reportLevel = "high"
//    //visitors = ["FindSqlInjection", "SwitchFallthrough"]
//    //omitVisitors = ["FindNonShortCircuit"]
//    //includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
//    //excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
//    //excludeBugsFilter = file("$rootProject.projectDir/config/findbugs/excludeBugsFilter.xml")
//}
//apply plugin: 'pmd'
//pmd {
//    ignoreFailures = true
//    sourceSets = [sourceSets.main]
//    reportsDir = file("$project.buildDir/reports/pmd")
//}



version = '0.0.1'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport