Joda-Time version 2.4
---------------------

Joda-Time is a date and time handling library that seeks to replace the JDK
Date and Calendar classes.

This release contains enhancements, bug fixes and a time zone update.
The release runs on JDK 5 or later.

Joda-Time is licensed under the business-friendly Apache License Version 2.
This is the same license as all of Apache, plus other open source projects such as Spring.
The intent is to make the code available to the Java community with the minimum
of restrictions. If the license causes you problems please contact the mailing list.

**  Please also check out our related projects   **
** http://www.joda.org/joda-time/related.html **


Enhancements since 2.3
----------------------
- Duration.multipliedBy(), .dividedBy(), .negated()
  Additional methods on Duration

- LocalDate.hashCode()
  Remove unnecessary volatile on instance variable [#68]
  LocalDate hash code meets criteria of the racy single-check idiom


Compatibility with 2.3
----------------------
Build system - Yes

Binary compatible - Yes

Source compatible - Yes

Serialization compatible - Yes

Data compatible - Yes, except
 - DateTimeZone data updated to version 2013d

Semantic compatible - Yes, except
- DateTimeField duration fields have been fixed
  For example, yearOfEra() now has a range of eras() rather than null
  The DurationField instances now compare using equals() correctly
- MutableDateTime.add(DateTimeFieldType,int), addDays(int) and friends [#77]
  Adding zero will no longer change the offset during DST overlap in autumn/fall


Deprecations since 2.3
----------------------


Bug fixes since 2.3
-------------------
- DateTimeField.getDurationField() / DateTimeField.getRangeDurationField() [#92,#93]
  Previously some of the complex cases were wrong, notably around centuries and eras
  For example, yearOfEra() returned a range of null when it should be eras()
  A slew of tests were added and a variety of bugs fixed
  This affects DateTimeField.getDurationField() and DateTimeField.getRangeDurationField()

- DateTimeUtils.isContiguous(ReadablePartial) [#89]
  The isContiguous() method could throw a NullPointerException when evaluating weird partials

- Period.normalizedStandard(PeriodType) [#79]
  Fix handling of PeriodType when either years or months missing

- Partial.with(DateTimeFieldType,int) [#88]
  Validation in this method was not as thorough as that in the constructor
  This allowed invalid partials to be created

- MutableDateTime.add(DateTimeFieldType,int), addDays(int) and friends [#77]
  Adding zero to a MutableDateTime used to change the offset during DST overlap in autumn/fall
  This is now fixed to not change the offset

- Better Javadoc for parsing of numbers in format patterns [#60]

- Remove uncaughtException calls [#59]
  Previously the code called ThreadGroup.uncaughtException() which was invalid

- Better Javadoc for thread saefty of DateTimeUtils [#67]

- Better Javadoc for DateTimeComparator [#73]

- Fix the links to the IANA time zone database [#83]

- Better Javadoc for DateTimeFormatter parsing [#78]

- Better Javadoc for DateTimeFormat fraction of second [#62]


Scala
--------
Joda-Time uses annotations from Joda-Convert.
In the Java programming language, this dependency is optional, however in Scala it is not.
Scala users must manually add the Joda-Convert v1.2 dependency.


Feedback
--------
Feedback is best received using GitHub issues and Pull Requests.
https://github.com/JodaOrg/joda-time/

Feedback is also welcomed via the joda-interest mailing list.

The Joda team
http://www.joda.org/joda-time/
